//文件格式 HOCON
//ktor 标准配置
ktor {
	deployment {
		watch = [app]
		port = 80
		port = ${?KT_PORT}
		//sslPort = 443
	}

	//  security {
	//    ssl {
	//      keyStore = mh.jks
	//      keyAlias = mh_lv1
	//      keyStorePassword = 123456
	//      privateKeyPassword = 123456
	//    }
	//  }

	application {
		//启动模块
		modules = [${package}.app.Launcher.main]
	}
}
//数据源配置
datasource {

	#  dev server
	url: "jdbc:postgresql://192.168.8.94:65432/db"
	username: zen
	password: zen

	# 环境变量
	url: ${?KT_DB_URL}
	username: ${?KT_DB_USR}
	password: ${?KT_DB_PWD}
	# 其他数据源
	extra {

	}
}
//liquibase 配置
liquibase {
	changeLog = "db-changelog.yml"
}
//Ebean 配置
ebean {
	ddl {
		run = false //外部数据库需要禁用自动建表
		run = ${?KT_EBEAN_RUN}
		generate = false
		generate = ${?KT_EBEAN_GENERATE}
	}
}
# 日志打印配置
logback {
	config {
		appenders {
			CONSOLE {
				class = "ch.qos.logback.core.ConsoleAppender"
				encoder {
					pattern.value = "%d{YYYY-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %green([%-4.30thread]) %blue(%logger{36}) %boldGreen(\\(%F:%line\\)) - %msg%n"
				}
			}
			ERRFILE {
				class = "ch.qos.logback.core.rolling.RollingFileAppender"
				file = "log/error.log"
				rollingPolicy {
					class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy"
					FileNamePattern.value = "log/error_%d{yyyy-MM-dd}.log.zip"
					maxHistory.value = "30"
				}
				encoder {
					pattern.value = "%d{YYYY-MM-dd HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35} - %msg%n"
				}
			}
			APPFILE {
				class = "ch.qos.logback.core.rolling.RollingFileAppender"
				file = "log/app.log"
				rollingPolicy {
					class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy"
					FileNamePattern.value = "log/app_%d{yyyy-MM-dd}.log.zip"
					maxHistory.value = "30"
				}
				encoder {
					pattern.value = "%d{YYYY-MM-dd HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35} - %msg%n"
				}
			}
		}
		root {level = INFO, ref = [CONSOLE]}
		loggers {
			"ktor.application": {level = INFO, ref = [APPFILE]}
			"ktor.application": {level = ERROR, ref = [ERRFILE]}
			"api.error": {level = ERROR, ref = [ERRFILE]}
			"io.netty": {level = ERROR, ref = [ERRFILE]}
			"com.zaxxer": {level = ERROR, ref = [ERRFILE]}
		}
	}
}
//caffeine 缓存配置
caffeine {
	ACC_TOKEN = "initialCapacity=1,expireAfterAccess=8h" //用户TOKEN缓存
	SCRIPT_ENGINE = "initialCapacity=1,expireAfterAccess=1h" //预先编译脚本缓存
}
//鉴权模块配置
authenticate {
	header = "Authorization"
}

